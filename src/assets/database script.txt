----!! SKEDOL DATABASE !!---- 

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

------------------------------------------------------------------------------------

create table company (
	id UUID primary key default uuid_generate_v4(),
	social_name varchar(120) not null,
	active bool
);

------------------------------------------------------------------------------------

create table account (
    name varchar(80),
    username varchar(45) not null primary key,
    password text not null,
    active boolean,
    fk_company UUID not null,
    email varchar(320) not null,
    constraint fk_company foreign key (fk_company) references company(id)
);

------------------------------------------------------------------------------------

create table customer (
    id UUID primary key default uuid_generate_v4(),
    fk_company UUID not null,
    name varchar(120) not null,
    cellphone varchar(13),
    email varchar(200),
	constraint fk_company foreign key (fk_company) references company(id)    
);

------------------------------------------------------------------------------------

create table employee (
	id UUID primary key default uuid_generate_v4(),
	fk_company UUID not null,
	name varchar(80) not null,
	active boolean default true,
	constraint fk_company foreign key(fk_company) references company(id)
);

------------------------------------------------------------------------------------

create table schedule (
    id UUID primary key default uuid_generate_v4(),
	fk_employee UUID not null,
	fk_customer UUID not null,
	schedule_date timestamp,
    total_minutes integer default 0,
    total_price numeric(19,6) default 0,
	constraint fk_employee foreign key (fk_employee) references employee(id),
	constraint fk_customer foreign key (fk_customer) references customer(id)
);

------------------------------------------------------------------------------------

create table item (
    id UUID primary key default uuid_generate_v4(),
    fk_company UUID not null,
    description varchar(80) not null,
    service_minutes integer,
    active boolean,
    type varchar(15) default 'undefined',
    constraint fk_company foreign key (fk_company) references company(id)
);

------------------------------------------------------------------------------------

create table schedule_item (
    id UUID primary key default uuid_generate_v4(),
    fk_schedule UUID not null,
    fk_item UUID not null,
    service_minutes integer,
    price numeric(19,6) default 0,
    constraint fk_schedule foreign key(fk_schedule) references schedule(id),
    constraint fk_item foreign key(fk_item) references item(id)
);

------------------------------------------------------------------------------------

create table email (
    id UUID primary key default uuid_generate_v4(),
	fk_company UUID not null,
	email varchar(320) not null,
	password text,
	host varchar(255),
	port integer,
	constraint fk_company foreign key (fk_company) references company(id)
);

------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION func_calculate_schedule_total()
RETURNS TRIGGER AS 
$$
DECLARE
	sum_service_minutes INTEGER;
	sum_price NUMERIC(19,6);
	schedule_key UUID;
BEGIN
   -- Quando é delete, ele não existe o NEW, porque o registro foi excluído
   -- Neste caso, devemos tratar p/ gravar numa variável o valor da chave da tabela pai.
   IF TG_OP = 'DELETE' THEN
   	 schedule_key = OLD.FK_SCHEDULE;
   ELSE
     schedule_key = NEW.FK_SCHEDULE;
   END IF;	

   -- Busca os totais
	SELECT SUM(COALESCE(SERVICE_MINUTES,0)), SUM(COALESCE(PRICE,0)) 
	INTO sum_service_minutes, sum_price
	  FROM SCHEDULE_ITEM
	 WHERE FK_SCHEDULE = schedule_key;
	 
	-- Atualiza a tabela de agendamento com os novos valores
	UPDATE SCHEDULE
		SET TOTAL_MINUTES = COALESCE(sum_service_minutes,0),
			 TOTAL_PRICE = COALESCE(sum_price,0)
	 WHERE ID = schedule_key;
		
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

------------------------------------------------------------------------------------

CREATE TRIGGER after_update_schedule_item
AFTER UPDATE ON SCHEDULE_ITEM
FOR EACH ROW
EXECUTE FUNCTION func_calculate_schedule_total();

------------------------------------------------------------------------------------

CREATE TRIGGER after_insert_schedule_item
AFTER INSERT ON SCHEDULE_ITEM
FOR EACH ROW
EXECUTE FUNCTION func_calculate_schedule_total();

------------------------------------------------------------------------------------

CREATE TRIGGER after_delete_schedule_item
AFTER DELETE ON SCHEDULE_ITEM
FOR EACH ROW
EXECUTE FUNCTION func_calculate_schedule_total();

-------------------------------------------------------------------------------------

